/* soapC.cpp
   Generated by gSOAP 2.8.15 from controlPuerta.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.15 2014-11-26 19:29:45 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, NULL, NULL, "ns1:Modulo_Acceso_PuertaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta:
		return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, NULL, NULL, "ns1:Modulo_Acceso_Puerta");
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse:
		return soap_in_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, NULL, NULL, "ns1:Modulo_obtener_horaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora:
		return soap_in_ns1__Modulo_USCOREobtener_USCOREhora(soap, NULL, NULL, "ns1:Modulo_obtener_hora");
	case SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse:
		return soap_in_ns1__Modulo_USCOREAsistenciaResponse(soap, NULL, NULL, "ns1:Modulo_AsistenciaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREAsistencia:
		return soap_in_ns1__Modulo_USCOREAsistencia(soap, NULL, NULL, "ns1:Modulo_Asistencia");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistenciaResponse:
		return soap_in_PointerTons1__Modulo_USCOREAsistenciaResponse(soap, NULL, NULL, "ns1:Modulo_AsistenciaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistencia:
		return soap_in_PointerTons1__Modulo_USCOREAsistencia(soap, NULL, NULL, "ns1:Modulo_Asistencia");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse:
		return soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(soap, NULL, NULL, "ns1:Modulo_obtener_horaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhora:
		return soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, NULL, NULL, "ns1:Modulo_obtener_hora");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		return soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, NULL, NULL, "ns1:Modulo_Acceso_PuertaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta:
		return soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, NULL, NULL, "ns1:Modulo_Acceso_Puerta");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTotime:
		return soap_in_PointerTotime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_Acceso_PuertaResponse"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse;
			return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_Acceso_Puerta"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta;
			return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_obtener_horaResponse"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse;
			return soap_in_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_obtener_hora"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora;
			return soap_in_ns1__Modulo_USCOREobtener_USCOREhora(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_AsistenciaResponse"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse;
			return soap_in_ns1__Modulo_USCOREAsistenciaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Modulo_Asistencia"))
		{	*type = SOAP_TYPE_ns1__Modulo_USCOREAsistencia;
			return soap_in_ns1__Modulo_USCOREAsistencia(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		return ((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_Acceso_PuertaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta:
		return ((ns1__Modulo_USCOREAcceso_USCOREPuerta *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_Acceso_Puerta");
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse:
		return ((ns1__Modulo_USCOREobtener_USCOREhoraResponse *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_obtener_horaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora:
		return ((ns1__Modulo_USCOREobtener_USCOREhora *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_obtener_hora");
	case SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse:
		return ((ns1__Modulo_USCOREAsistenciaResponse *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_AsistenciaResponse");
	case SOAP_TYPE_ns1__Modulo_USCOREAsistencia:
		return ((ns1__Modulo_USCOREAsistencia *)ptr)->soap_out(soap, tag, id, "ns1:Modulo_Asistencia");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistenciaResponse:
		return soap_out_PointerTons1__Modulo_USCOREAsistenciaResponse(soap, tag, id, (ns1__Modulo_USCOREAsistenciaResponse *const*)ptr, "ns1:Modulo_AsistenciaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistencia:
		return soap_out_PointerTons1__Modulo_USCOREAsistencia(soap, tag, id, (ns1__Modulo_USCOREAsistencia *const*)ptr, "ns1:Modulo_Asistencia");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse:
		return soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag, id, (ns1__Modulo_USCOREobtener_USCOREhoraResponse *const*)ptr, "ns1:Modulo_obtener_horaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhora:
		return soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, tag, id, (ns1__Modulo_USCOREobtener_USCOREhora *const*)ptr, "ns1:Modulo_obtener_hora");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		return soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag, id, (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *const*)ptr, "ns1:Modulo_Acceso_PuertaResponse");
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta:
		return soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, id, (ns1__Modulo_USCOREAcceso_USCOREPuerta *const*)ptr, "ns1:Modulo_Acceso_Puerta");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTotime:
		return soap_out_PointerTotime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta:
		((ns1__Modulo_USCOREAcceso_USCOREPuerta *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse:
		((ns1__Modulo_USCOREobtener_USCOREhoraResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora:
		((ns1__Modulo_USCOREobtener_USCOREhora *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse:
		((ns1__Modulo_USCOREAsistenciaResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAsistencia:
		((ns1__Modulo_USCOREAsistencia *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREAsistencia:
		soap_serialize___ns1__Modulo_USCOREAsistencia(soap, (const struct __ns1__Modulo_USCOREAsistencia *)ptr);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREobtener_USCOREhora:
		soap_serialize___ns1__Modulo_USCOREobtener_USCOREhora(soap, (const struct __ns1__Modulo_USCOREobtener_USCOREhora *)ptr);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREAcceso_USCOREPuerta:
		soap_serialize___ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, (const struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistenciaResponse:
		soap_serialize_PointerTons1__Modulo_USCOREAsistenciaResponse(soap, (ns1__Modulo_USCOREAsistenciaResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAsistencia:
		soap_serialize_PointerTons1__Modulo_USCOREAsistencia(soap, (ns1__Modulo_USCOREAsistencia *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse:
		soap_serialize_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(soap, (ns1__Modulo_USCOREobtener_USCOREhoraResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhora:
		soap_serialize_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, (ns1__Modulo_USCOREobtener_USCOREhora *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		soap_serialize_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta:
		soap_serialize_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, (ns1__Modulo_USCOREAcceso_USCOREPuerta *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotime:
		soap_serialize_PointerTotime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREAsistencia:
		return (void*)soap_instantiate_ns1__Modulo_USCOREAsistencia(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse:
		return (void*)soap_instantiate_ns1__Modulo_USCOREAsistenciaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora:
		return (void*)soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhora(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse:
		return (void*)soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta:
		return (void*)soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		return (void*)soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Modulo_USCOREAcceso_USCOREPuerta:
		return (void*)soap_instantiate___ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Modulo_USCOREobtener_USCOREhora:
		return (void*)soap_instantiate___ns1__Modulo_USCOREobtener_USCOREhora(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Modulo_USCOREAsistencia:
		return (void*)soap_instantiate___ns1__Modulo_USCOREAsistencia(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAsistencia:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREAsistencia*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREAsistencia*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREAsistenciaResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREAsistenciaResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREobtener_USCOREhora*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREobtener_USCOREhora*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREobtener_USCOREhoraResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREobtener_USCOREhoraResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREAcceso_USCOREPuerta*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREAcceso_USCOREPuerta*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse:
		if (p->size < 0)
			SOAP_DELETE((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREAcceso_USCOREPuerta:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Modulo_USCOREAcceso_USCOREPuerta*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Modulo_USCOREAcceso_USCOREPuerta*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREobtener_USCOREhora:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Modulo_USCOREobtener_USCOREhora*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Modulo_USCOREobtener_USCOREhora*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Modulo_USCOREAsistencia:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Modulo_USCOREAsistencia*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Modulo_USCOREAsistencia*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuertaResponse * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse, 0, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse), 0, soap_copy_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_Acceso_PuertaResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuertaResponse * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREAcceso_USCOREPuertaResponse * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
		((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREAcceso_USCOREPuertaResponse %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)p = *(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse*)q;
}

void ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Modulo_USCOREAcceso_USCOREPuerta::rut = NULL;
	this->ns1__Modulo_USCOREAcceso_USCOREPuerta::dato_USCORErecibido = NULL;
	this->ns1__Modulo_USCOREAcceso_USCOREPuerta::fecha = NULL;
	this->ns1__Modulo_USCOREAcceso_USCOREPuerta::numerodispositivo = NULL;
	soap_default_int(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::tipomarca);
	this->ns1__Modulo_USCOREAcceso_USCOREPuerta::foto = NULL;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::rut);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::dato_USCORErecibido);
	soap_serialize_PointerTotime(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::fecha);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::numerodispositivo);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__Modulo_USCOREAcceso_USCOREPuerta::foto);
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREAcceso_USCOREPuerta *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "rut", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::rut), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "dato_recibido", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::dato_USCORErecibido), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "fecha", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::fecha), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "numerodispositivo", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::numerodispositivo), ""))
		return soap->error;
	if (soap_out_int(soap, "tipomarca", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::tipomarca), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "foto", -1, &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::foto), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, ns1__Modulo_USCOREAcceso_USCOREPuerta *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREAcceso_USCOREPuerta *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREAcceso_USCOREPuerta *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_rut1 = 1;
	size_t soap_flag_dato_USCORErecibido1 = 1;
	size_t soap_flag_fecha1 = 1;
	size_t soap_flag_numerodispositivo1 = 1;
	size_t soap_flag_tipomarca1 = 1;
	size_t soap_flag_foto1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rut1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "rut", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::rut), "xsd:string"))
				{	soap_flag_rut1--;
					continue;
				}
			if (soap_flag_dato_USCORErecibido1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "dato_recibido", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::dato_USCORErecibido), "xsd:string"))
				{	soap_flag_dato_USCORErecibido1--;
					continue;
				}
			if (soap_flag_fecha1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "fecha", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::fecha), "xsd:dateTime"))
				{	soap_flag_fecha1--;
					continue;
				}
			if (soap_flag_numerodispositivo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "numerodispositivo", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::numerodispositivo), "xsd:string"))
				{	soap_flag_numerodispositivo1--;
					continue;
				}
			if (soap_flag_tipomarca1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "tipomarca", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::tipomarca), "xsd:int"))
				{	soap_flag_tipomarca1--;
					continue;
				}
			if (soap_flag_foto1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "foto", &(a->ns1__Modulo_USCOREAcceso_USCOREPuerta::foto), "xsd:base64Binary"))
				{	soap_flag_foto1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREAcceso_USCOREPuerta *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta, 0, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta), 0, soap_copy_ns1__Modulo_USCOREAcceso_USCOREPuerta);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_tipomarca1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_Acceso_Puerta", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuerta *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuerta(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREAcceso_USCOREPuerta);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta);
		((ns1__Modulo_USCOREAcceso_USCOREPuerta*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREAcceso_USCOREPuerta, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREAcceso_USCOREPuerta*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREAcceso_USCOREPuerta*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREAcceso_USCOREPuerta %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREAcceso_USCOREPuerta*)p = *(ns1__Modulo_USCOREAcceso_USCOREPuerta*)q;
}

void ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Modulo_USCOREobtener_USCOREhoraResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTotime(soap, &this->ns1__Modulo_USCOREobtener_USCOREhoraResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREobtener_USCOREhoraResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse), type))
		return soap->error;
	if (soap_out_PointerTotime(soap, "return", -1, &(a->ns1__Modulo_USCOREobtener_USCOREhoraResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhoraResponse * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREobtener_USCOREhoraResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREobtener_USCOREhoraResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse, sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREobtener_USCOREhoraResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "return", &(a->ns1__Modulo_USCOREobtener_USCOREhoraResponse::return_), "xsd:dateTime"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREobtener_USCOREhoraResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse, 0, sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse), 0, soap_copy_ns1__Modulo_USCOREobtener_USCOREhoraResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_obtener_horaResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhoraResponse * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhoraResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREobtener_USCOREhoraResponse * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhoraResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREobtener_USCOREhoraResponse);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse);
		((ns1__Modulo_USCOREobtener_USCOREhoraResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREobtener_USCOREhoraResponse, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREobtener_USCOREhoraResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREobtener_USCOREhoraResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREobtener_USCOREhoraResponse %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREobtener_USCOREhoraResponse*)p = *(ns1__Modulo_USCOREobtener_USCOREhoraResponse*)q;
}

void ns1__Modulo_USCOREobtener_USCOREhora::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREobtener_USCOREhora::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREobtener_USCOREhora::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREobtener_USCOREhora(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREobtener_USCOREhora *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREobtener_USCOREhora::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREobtener_USCOREhora(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, ns1__Modulo_USCOREobtener_USCOREhora *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREobtener_USCOREhora *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora, sizeof(ns1__Modulo_USCOREobtener_USCOREhora), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREobtener_USCOREhora *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREobtener_USCOREhora *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora, 0, sizeof(ns1__Modulo_USCOREobtener_USCOREhora), 0, soap_copy_ns1__Modulo_USCOREobtener_USCOREhora);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREobtener_USCOREhora::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_obtener_hora", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREobtener_USCOREhora::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREobtener_USCOREhora(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhora *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREobtener_USCOREhora(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhora(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREobtener_USCOREhora);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREobtener_USCOREhora);
		((ns1__Modulo_USCOREobtener_USCOREhora*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREobtener_USCOREhora, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREobtener_USCOREhora);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREobtener_USCOREhora*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREobtener_USCOREhora*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREobtener_USCOREhora %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREobtener_USCOREhora*)p = *(ns1__Modulo_USCOREobtener_USCOREhora*)q;
}

void ns1__Modulo_USCOREAsistenciaResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Modulo_USCOREAsistenciaResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREAsistenciaResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAsistenciaResponse::return_);
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREAsistenciaResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREAsistenciaResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREAsistenciaResponse(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREAsistenciaResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ns1__Modulo_USCOREAsistenciaResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREAsistenciaResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREAsistenciaResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistenciaResponse * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREAsistenciaResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREAsistenciaResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREAsistenciaResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse, sizeof(ns1__Modulo_USCOREAsistenciaResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREAsistenciaResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ns1__Modulo_USCOREAsistenciaResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREAsistenciaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse, 0, sizeof(ns1__Modulo_USCOREAsistenciaResponse), 0, soap_copy_ns1__Modulo_USCOREAsistenciaResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREAsistenciaResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_AsistenciaResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREAsistenciaResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREAsistenciaResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistenciaResponse * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREAsistenciaResponse(struct soap *soap, ns1__Modulo_USCOREAsistenciaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREAsistenciaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREAsistenciaResponse * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREAsistenciaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREAsistenciaResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREAsistenciaResponse);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREAsistenciaResponse);
		((ns1__Modulo_USCOREAsistenciaResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREAsistenciaResponse, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREAsistenciaResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREAsistenciaResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREAsistenciaResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREAsistenciaResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREAsistenciaResponse %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREAsistenciaResponse*)p = *(ns1__Modulo_USCOREAsistenciaResponse*)q;
}

void ns1__Modulo_USCOREAsistencia::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Modulo_USCOREAsistencia::rut = NULL;
	this->ns1__Modulo_USCOREAsistencia::dato_USCORErecibido = NULL;
	this->ns1__Modulo_USCOREAsistencia::hash_USCOREalternativo = NULL;
	this->ns1__Modulo_USCOREAsistencia::fecha = NULL;
	this->ns1__Modulo_USCOREAsistencia::numerodispositivo = NULL;
	soap_default_int(soap, &this->ns1__Modulo_USCOREAsistencia::tipomarca);
	this->ns1__Modulo_USCOREAsistencia::foto = NULL;
	/* transient soap skipped */
}

void ns1__Modulo_USCOREAsistencia::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAsistencia::rut);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAsistencia::dato_USCORErecibido);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAsistencia::hash_USCOREalternativo);
	soap_serialize_PointerTotime(soap, &this->ns1__Modulo_USCOREAsistencia::fecha);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Modulo_USCOREAsistencia::numerodispositivo);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__Modulo_USCOREAsistencia::foto);
	/* transient soap skipped */
#endif
}

int ns1__Modulo_USCOREAsistencia::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Modulo_USCOREAsistencia(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, int id, const ns1__Modulo_USCOREAsistencia *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Modulo_USCOREAsistencia), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "rut", -1, &(a->ns1__Modulo_USCOREAsistencia::rut), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "dato_recibido", -1, &(a->ns1__Modulo_USCOREAsistencia::dato_USCORErecibido), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "hash_alternativo", -1, &(a->ns1__Modulo_USCOREAsistencia::hash_USCOREalternativo), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "fecha", -1, &(a->ns1__Modulo_USCOREAsistencia::fecha), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "numerodispositivo", -1, &(a->ns1__Modulo_USCOREAsistencia::numerodispositivo), ""))
		return soap->error;
	if (soap_out_int(soap, "tipomarca", -1, &(a->ns1__Modulo_USCOREAsistencia::tipomarca), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "foto", -1, &(a->ns1__Modulo_USCOREAsistencia::foto), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Modulo_USCOREAsistencia::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Modulo_USCOREAsistencia(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistencia * SOAP_FMAC4 soap_in_ns1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, ns1__Modulo_USCOREAsistencia *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Modulo_USCOREAsistencia *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Modulo_USCOREAsistencia, sizeof(ns1__Modulo_USCOREAsistencia), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Modulo_USCOREAsistencia)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Modulo_USCOREAsistencia *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_rut1 = 1;
	size_t soap_flag_dato_USCORErecibido1 = 1;
	size_t soap_flag_hash_USCOREalternativo1 = 1;
	size_t soap_flag_fecha1 = 1;
	size_t soap_flag_numerodispositivo1 = 1;
	size_t soap_flag_tipomarca1 = 1;
	size_t soap_flag_foto1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rut1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "rut", &(a->ns1__Modulo_USCOREAsistencia::rut), "xsd:string"))
				{	soap_flag_rut1--;
					continue;
				}
			if (soap_flag_dato_USCORErecibido1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "dato_recibido", &(a->ns1__Modulo_USCOREAsistencia::dato_USCORErecibido), "xsd:string"))
				{	soap_flag_dato_USCORErecibido1--;
					continue;
				}
			if (soap_flag_hash_USCOREalternativo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "hash_alternativo", &(a->ns1__Modulo_USCOREAsistencia::hash_USCOREalternativo), "xsd:string"))
				{	soap_flag_hash_USCOREalternativo1--;
					continue;
				}
			if (soap_flag_fecha1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "fecha", &(a->ns1__Modulo_USCOREAsistencia::fecha), "xsd:dateTime"))
				{	soap_flag_fecha1--;
					continue;
				}
			if (soap_flag_numerodispositivo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "numerodispositivo", &(a->ns1__Modulo_USCOREAsistencia::numerodispositivo), "xsd:string"))
				{	soap_flag_numerodispositivo1--;
					continue;
				}
			if (soap_flag_tipomarca1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "tipomarca", &(a->ns1__Modulo_USCOREAsistencia::tipomarca), "xsd:int"))
				{	soap_flag_tipomarca1--;
					continue;
				}
			if (soap_flag_foto1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "foto", &(a->ns1__Modulo_USCOREAsistencia::foto), "xsd:base64Binary"))
				{	soap_flag_foto1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Modulo_USCOREAsistencia *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Modulo_USCOREAsistencia, 0, sizeof(ns1__Modulo_USCOREAsistencia), 0, soap_copy_ns1__Modulo_USCOREAsistencia);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_tipomarca1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Modulo_USCOREAsistencia::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Modulo_USCOREAsistencia);
	if (this->soap_out(soap, tag?tag:"ns1:Modulo_Asistencia", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Modulo_USCOREAsistencia::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Modulo_USCOREAsistencia(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistencia * SOAP_FMAC4 soap_get_ns1__Modulo_USCOREAsistencia(struct soap *soap, ns1__Modulo_USCOREAsistencia *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Modulo_USCOREAsistencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Modulo_USCOREAsistencia * SOAP_FMAC2 soap_instantiate_ns1__Modulo_USCOREAsistencia(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Modulo_USCOREAsistencia(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Modulo_USCOREAsistencia, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Modulo_USCOREAsistencia);
		if (size)
			*size = sizeof(ns1__Modulo_USCOREAsistencia);
		((ns1__Modulo_USCOREAsistencia*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns1__Modulo_USCOREAsistencia, n);
		if (size)
			*size = n * sizeof(ns1__Modulo_USCOREAsistencia);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Modulo_USCOREAsistencia*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Modulo_USCOREAsistencia*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Modulo_USCOREAsistencia(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Modulo_USCOREAsistencia %p -> %p\n", q, p));
	*(ns1__Modulo_USCOREAsistencia*)p = *(ns1__Modulo_USCOREAsistencia*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Modulo_USCOREAsistencia(struct soap *soap, struct __ns1__Modulo_USCOREAsistencia *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Modulo_USCOREAsistencia_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Modulo_USCOREAsistencia(struct soap *soap, const struct __ns1__Modulo_USCOREAsistencia *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Modulo_USCOREAsistencia(soap, &a->ns1__Modulo_USCOREAsistencia_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, int id, const struct __ns1__Modulo_USCOREAsistencia *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__Modulo_USCOREAsistencia(soap, "ns1:Modulo_Asistencia", -1, &a->ns1__Modulo_USCOREAsistencia_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREAsistencia * SOAP_FMAC4 soap_in___ns1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, struct __ns1__Modulo_USCOREAsistencia *a, const char *type)
{
	size_t soap_flag_ns1__Modulo_USCOREAsistencia_ = 1;
	short soap_flag;
	a = (struct __ns1__Modulo_USCOREAsistencia *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Modulo_USCOREAsistencia, sizeof(struct __ns1__Modulo_USCOREAsistencia), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Modulo_USCOREAsistencia(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Modulo_USCOREAsistencia_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Modulo_USCOREAsistencia(soap, "ns1:Modulo_Asistencia", &a->ns1__Modulo_USCOREAsistencia_, "ns1:Modulo_Asistencia"))
				{	soap_flag_ns1__Modulo_USCOREAsistencia_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Modulo_USCOREAsistencia(struct soap *soap, const struct __ns1__Modulo_USCOREAsistencia *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Modulo_USCOREAsistencia(soap, tag?tag:"-ns1:Modulo_Asistencia", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREAsistencia * SOAP_FMAC4 soap_get___ns1__Modulo_USCOREAsistencia(struct soap *soap, struct __ns1__Modulo_USCOREAsistencia *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Modulo_USCOREAsistencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Modulo_USCOREAsistencia * SOAP_FMAC2 soap_instantiate___ns1__Modulo_USCOREAsistencia(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Modulo_USCOREAsistencia(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Modulo_USCOREAsistencia, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Modulo_USCOREAsistencia);
		if (size)
			*size = sizeof(struct __ns1__Modulo_USCOREAsistencia);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Modulo_USCOREAsistencia, n);
		if (size)
			*size = n * sizeof(struct __ns1__Modulo_USCOREAsistencia);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Modulo_USCOREAsistencia*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Modulo_USCOREAsistencia(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Modulo_USCOREAsistencia %p -> %p\n", q, p));
	*(struct __ns1__Modulo_USCOREAsistencia*)p = *(struct __ns1__Modulo_USCOREAsistencia*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, struct __ns1__Modulo_USCOREobtener_USCOREhora *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Modulo_USCOREobtener_USCOREhora_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const struct __ns1__Modulo_USCOREobtener_USCOREhora *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, &a->ns1__Modulo_USCOREobtener_USCOREhora_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, int id, const struct __ns1__Modulo_USCOREobtener_USCOREhora *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, "ns1:Modulo_obtener_hora", -1, &a->ns1__Modulo_USCOREobtener_USCOREhora_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC4 soap_in___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, struct __ns1__Modulo_USCOREobtener_USCOREhora *a, const char *type)
{
	size_t soap_flag_ns1__Modulo_USCOREobtener_USCOREhora_ = 1;
	short soap_flag;
	a = (struct __ns1__Modulo_USCOREobtener_USCOREhora *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Modulo_USCOREobtener_USCOREhora, sizeof(struct __ns1__Modulo_USCOREobtener_USCOREhora), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Modulo_USCOREobtener_USCOREhora(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Modulo_USCOREobtener_USCOREhora_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, "ns1:Modulo_obtener_hora", &a->ns1__Modulo_USCOREobtener_USCOREhora_, "ns1:Modulo_obtener_hora"))
				{	soap_flag_ns1__Modulo_USCOREobtener_USCOREhora_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const struct __ns1__Modulo_USCOREobtener_USCOREhora *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Modulo_USCOREobtener_USCOREhora(soap, tag?tag:"-ns1:Modulo_obtener_hora", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC4 soap_get___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, struct __ns1__Modulo_USCOREobtener_USCOREhora *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Modulo_USCOREobtener_USCOREhora(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Modulo_USCOREobtener_USCOREhora * SOAP_FMAC2 soap_instantiate___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Modulo_USCOREobtener_USCOREhora(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Modulo_USCOREobtener_USCOREhora, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Modulo_USCOREobtener_USCOREhora);
		if (size)
			*size = sizeof(struct __ns1__Modulo_USCOREobtener_USCOREhora);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Modulo_USCOREobtener_USCOREhora, n);
		if (size)
			*size = n * sizeof(struct __ns1__Modulo_USCOREobtener_USCOREhora);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Modulo_USCOREobtener_USCOREhora*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Modulo_USCOREobtener_USCOREhora %p -> %p\n", q, p));
	*(struct __ns1__Modulo_USCOREobtener_USCOREhora*)p = *(struct __ns1__Modulo_USCOREobtener_USCOREhora*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Modulo_USCOREAcceso_USCOREPuerta_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, &a->ns1__Modulo_USCOREAcceso_USCOREPuerta_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, int id, const struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, "ns1:Modulo_Acceso_Puerta", -1, &a->ns1__Modulo_USCOREAcceso_USCOREPuerta_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC4 soap_in___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *a, const char *type)
{
	size_t soap_flag_ns1__Modulo_USCOREAcceso_USCOREPuerta_ = 1;
	short soap_flag;
	a = (struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Modulo_USCOREAcceso_USCOREPuerta, sizeof(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Modulo_USCOREAcceso_USCOREPuerta_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, "ns1:Modulo_Acceso_Puerta", &a->ns1__Modulo_USCOREAcceso_USCOREPuerta_, "ns1:Modulo_Acceso_Puerta"))
				{	soap_flag_ns1__Modulo_USCOREAcceso_USCOREPuerta_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag?tag:"-ns1:Modulo_Acceso_Puerta", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC4 soap_get___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, struct __ns1__Modulo_USCOREAcceso_USCOREPuerta *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Modulo_USCOREAcceso_USCOREPuerta * SOAP_FMAC2 soap_instantiate___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Modulo_USCOREAcceso_USCOREPuerta(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Modulo_USCOREAcceso_USCOREPuerta, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta);
		if (size)
			*size = sizeof(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta, n);
		if (size)
			*size = n * sizeof(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Modulo_USCOREAcceso_USCOREPuerta*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Modulo_USCOREAcceso_USCOREPuerta %p -> %p\n", q, p));
	*(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta*)p = *(struct __ns1__Modulo_USCOREAcceso_USCOREPuerta*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREAsistenciaResponse(struct soap *soap, ns1__Modulo_USCOREAsistenciaResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREAsistenciaResponse(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREAsistenciaResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistenciaResponse ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREAsistenciaResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREAsistenciaResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREAsistenciaResponse **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREAsistenciaResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREAsistenciaResponse *)soap_instantiate_ns1__Modulo_USCOREAsistenciaResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREAsistenciaResponse ** p = (ns1__Modulo_USCOREAsistenciaResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREAsistenciaResponse, sizeof(ns1__Modulo_USCOREAsistenciaResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREAsistenciaResponse(struct soap *soap, ns1__Modulo_USCOREAsistenciaResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREAsistenciaResponse);
	if (soap_out_PointerTons1__Modulo_USCOREAsistenciaResponse(soap, tag?tag:"ns1:Modulo_AsistenciaResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistenciaResponse ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREAsistenciaResponse(struct soap *soap, ns1__Modulo_USCOREAsistenciaResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREAsistenciaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREAsistencia(struct soap *soap, ns1__Modulo_USCOREAsistencia *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREAsistencia))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREAsistencia *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREAsistencia);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistencia ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREAsistencia(struct soap *soap, const char *tag, ns1__Modulo_USCOREAsistencia **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREAsistencia **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREAsistencia *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREAsistencia *)soap_instantiate_ns1__Modulo_USCOREAsistencia(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREAsistencia ** p = (ns1__Modulo_USCOREAsistencia **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREAsistencia, sizeof(ns1__Modulo_USCOREAsistencia), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREAsistencia(struct soap *soap, ns1__Modulo_USCOREAsistencia *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREAsistencia);
	if (soap_out_PointerTons1__Modulo_USCOREAsistencia(soap, tag?tag:"ns1:Modulo_Asistencia", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREAsistencia ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREAsistencia(struct soap *soap, ns1__Modulo_USCOREAsistencia **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREAsistencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhoraResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREobtener_USCOREhoraResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhoraResponse ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREobtener_USCOREhoraResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREobtener_USCOREhoraResponse **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREobtener_USCOREhoraResponse *)soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhoraResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREobtener_USCOREhoraResponse ** p = (ns1__Modulo_USCOREobtener_USCOREhoraResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhoraResponse, sizeof(ns1__Modulo_USCOREobtener_USCOREhoraResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhoraResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse);
	if (soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag?tag:"ns1:Modulo_obtener_horaResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhoraResponse ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhoraResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhoraResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhora *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREobtener_USCOREhora *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhora ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *tag, ns1__Modulo_USCOREobtener_USCOREhora **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREobtener_USCOREhora **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREobtener_USCOREhora *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREobtener_USCOREhora *)soap_instantiate_ns1__Modulo_USCOREobtener_USCOREhora(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREobtener_USCOREhora ** p = (ns1__Modulo_USCOREobtener_USCOREhora **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREobtener_USCOREhora, sizeof(ns1__Modulo_USCOREobtener_USCOREhora), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhora *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREobtener_USCOREhora);
	if (soap_out_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, tag?tag:"ns1:Modulo_obtener_hora", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREobtener_USCOREhora ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, ns1__Modulo_USCOREobtener_USCOREhora **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREobtener_USCOREhora(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuertaResponse ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, const char *tag, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *)soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREAcceso_USCOREPuertaResponse ** p = (ns1__Modulo_USCOREAcceso_USCOREPuertaResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuertaResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse);
	if (soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag?tag:"ns1:Modulo_Acceso_PuertaResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuertaResponse ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuertaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuerta *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, int id, ns1__Modulo_USCOREAcceso_USCOREPuerta *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuerta ** SOAP_FMAC4 soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *tag, ns1__Modulo_USCOREAcceso_USCOREPuerta **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Modulo_USCOREAcceso_USCOREPuerta **)soap_malloc(soap, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Modulo_USCOREAcceso_USCOREPuerta *)soap_instantiate_ns1__Modulo_USCOREAcceso_USCOREPuerta(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Modulo_USCOREAcceso_USCOREPuerta ** p = (ns1__Modulo_USCOREAcceso_USCOREPuerta **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Modulo_USCOREAcceso_USCOREPuerta, sizeof(ns1__Modulo_USCOREAcceso_USCOREPuerta), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuerta *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta);
	if (soap_out_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag?tag:"ns1:Modulo_Acceso_Puerta", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Modulo_USCOREAcceso_USCOREPuerta ** SOAP_FMAC4 soap_get_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, ns1__Modulo_USCOREAcceso_USCOREPuerta **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Modulo_USCOREAcceso_USCOREPuerta(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap *soap, time_t *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_time);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_time);
	if (id < 0)
		return soap->error;
	return soap_out_time(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_time(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_time, sizeof(time_t), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTotime);
	if (soap_out_PointerTotime(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
