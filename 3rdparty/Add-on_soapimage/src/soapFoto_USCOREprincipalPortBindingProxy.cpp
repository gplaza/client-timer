/* soapFoto_USCOREprincipalPortBindingProxy.cpp
   Generated by gSOAP 2.8.15 from image.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapFoto_USCOREprincipalPortBindingProxy.h"

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	Foto_USCOREprincipalPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	Foto_USCOREprincipalPortBindingProxy_init(_soap->imode, _soap->omode);
}

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	Foto_USCOREprincipalPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	Foto_USCOREprincipalPortBindingProxy_init(iomode, iomode);
}

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	Foto_USCOREprincipalPortBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	Foto_USCOREprincipalPortBindingProxy_init(imode, omode);
}

Foto_USCOREprincipalPortBindingProxy::~Foto_USCOREprincipalPortBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void Foto_USCOREprincipalPortBindingProxy::Foto_USCOREprincipalPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://ws/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void Foto_USCOREprincipalPortBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void Foto_USCOREprincipalPortBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	Foto_USCOREprincipalPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void Foto_USCOREprincipalPortBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *Foto_USCOREprincipalPortBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *Foto_USCOREprincipalPortBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *Foto_USCOREprincipalPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *Foto_USCOREprincipalPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int Foto_USCOREprincipalPortBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int Foto_USCOREprincipalPortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void Foto_USCOREprincipalPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void Foto_USCOREprincipalPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *Foto_USCOREprincipalPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int Foto_USCOREprincipalPortBindingProxy::recibe_USCOREfoto(const char *endpoint, const char *soap_action, ns1__recibe_USCOREfoto *ns1__recibe_USCOREfoto_, ns1__recibe_USCOREfotoResponse *ns1__recibe_USCOREfotoResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__recibe_USCOREfoto soap_tmp___ns1__recibe_USCOREfoto;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://ssodes.usm.cl:80/WS_insert_foto/Foto_principal";
	if (soap_action == NULL)
		soap_action = "http://ws/Foto_principal/recibe_fotoRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__recibe_USCOREfoto.ns1__recibe_USCOREfoto_ = ns1__recibe_USCOREfoto_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__recibe_USCOREfoto(soap, &soap_tmp___ns1__recibe_USCOREfoto);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__recibe_USCOREfoto(soap, &soap_tmp___ns1__recibe_USCOREfoto, "-ns1:recibe_foto", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__recibe_USCOREfoto(soap, &soap_tmp___ns1__recibe_USCOREfoto, "-ns1:recibe_foto", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__recibe_USCOREfotoResponse_)
		return soap_closesock(soap);
	ns1__recibe_USCOREfotoResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__recibe_USCOREfotoResponse_->soap_get(soap, "ns1:recibe_fotoResponse", "ns1:recibe_fotoResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
