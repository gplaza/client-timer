/* fotoStub.h
   Generated by gSOAP 2.8.21 from foto.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef fotoStub_H
#define fotoStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_foto1	"http://fotos.cl.usm.org/"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace foto {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_foto_xsd__base64Binary
#define SOAP_TYPE_foto_xsd__base64Binary (8)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_foto_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_foto_foto1__obtenerFoto
#define SOAP_TYPE_foto_foto1__obtenerFoto (13)
/* foto1:obtenerFoto */
class SOAP_CMAC foto1__obtenerFoto
{
public:
	std::string *rut;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_foto_foto1__obtenerFoto */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         foto1__obtenerFoto() { foto1__obtenerFoto::soap_default(NULL); }
	virtual ~foto1__obtenerFoto() { }
};
#endif

#ifndef SOAP_TYPE_foto_foto1__obtenerFotoResponse
#define SOAP_TYPE_foto_foto1__obtenerFotoResponse (14)
/* foto1:obtenerFotoResponse */
class SOAP_CMAC foto1__obtenerFotoResponse
{
public:
	xsd__base64Binary *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_foto_foto1__obtenerFotoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         foto1__obtenerFotoResponse() { foto1__obtenerFotoResponse::soap_default(NULL); }
	virtual ~foto1__obtenerFotoResponse() { }
};
#endif

#ifndef SOAP_TYPE_foto___foto1__obtenerFoto
#define SOAP_TYPE_foto___foto1__obtenerFoto (21)
/* Operation wrapper: */
struct __foto1__obtenerFoto
{
public:
	foto1__obtenerFoto *foto1__obtenerFoto_;	/* optional element of type foto1:obtenerFoto */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_foto___foto1__obtenerFoto */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_foto_SOAP_ENV__Header
#define SOAP_TYPE_foto_SOAP_ENV__Header (22)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_foto_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_foto_SOAP_ENV__Code
#define SOAP_TYPE_foto_SOAP_ENV__Code (23)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_foto_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_foto_SOAP_ENV__Detail
#define SOAP_TYPE_foto_SOAP_ENV__Detail (25)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_foto_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_foto_SOAP_ENV__Reason
#define SOAP_TYPE_foto_SOAP_ENV__Reason (28)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_foto_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_foto_SOAP_ENV__Fault
#define SOAP_TYPE_foto_SOAP_ENV__Fault (29)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_foto_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_foto__QName
#define SOAP_TYPE_foto__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_foto__XML
#define SOAP_TYPE_foto__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___foto1__obtenerFoto(struct soap *soap, const char *soap_endpoint, const char *soap_action, foto1__obtenerFoto *foto1__obtenerFoto_, foto1__obtenerFotoResponse &foto1__obtenerFotoResponse_);

} // namespace foto


#endif

/* End of fotoStub.h */
