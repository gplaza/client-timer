/* accesoStub.h
   Generated by gSOAP 2.8.21 from acceso.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef accesoStub_H
#define accesoStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://Principal/"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace acceso {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_acceso_xsd__base64Binary
#define SOAP_TYPE_acceso_xsd__base64Binary (8)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_acceso_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistencia
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistencia (13)
/* ns1:Modulo_Asistencia */
class SOAP_CMAC ns1__Modulo_USCOREAsistencia
{
public:
	std::string *rut;	/* optional element of type xsd:string */
	std::string *dato_USCORErecibido;	/* optional element of type xsd:string */
	std::string *hash_USCOREalternativo;	/* optional element of type xsd:string */
	time_t *fecha;	/* optional element of type xsd:dateTime */
	std::string *numerodispositivo;	/* optional element of type xsd:string */
	int tipomarca;	/* required element of type xsd:int */
	xsd__base64Binary *foto;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistencia */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREAsistencia() { ns1__Modulo_USCOREAsistencia::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREAsistencia() { }
};
#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistenciaResponse
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistenciaResponse (14)
/* ns1:Modulo_AsistenciaResponse */
class SOAP_CMAC ns1__Modulo_USCOREAsistenciaResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREAsistenciaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREAsistenciaResponse() { ns1__Modulo_USCOREAsistenciaResponse::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREAsistenciaResponse() { }
};
#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhora
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhora (15)
/* ns1:Modulo_obtener_hora */
class SOAP_CMAC ns1__Modulo_USCOREobtener_USCOREhora
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhora */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREobtener_USCOREhora() { ns1__Modulo_USCOREobtener_USCOREhora::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREobtener_USCOREhora() { }
};
#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhoraResponse
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhoraResponse (16)
/* ns1:Modulo_obtener_horaResponse */
class SOAP_CMAC ns1__Modulo_USCOREobtener_USCOREhoraResponse
{
public:
	time_t *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREobtener_USCOREhoraResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREobtener_USCOREhoraResponse() { ns1__Modulo_USCOREobtener_USCOREhoraResponse::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREobtener_USCOREhoraResponse() { }
};
#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuerta
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuerta (17)
/* ns1:Modulo_Acceso_Puerta */
class SOAP_CMAC ns1__Modulo_USCOREAcceso_USCOREPuerta
{
public:
	std::string *rut;	/* optional element of type xsd:string */
	std::string *dato_USCORErecibido;	/* optional element of type xsd:string */
	time_t *fecha;	/* optional element of type xsd:dateTime */
	std::string *numerodispositivo;	/* optional element of type xsd:string */
	int tipomarca;	/* required element of type xsd:int */
	xsd__base64Binary *foto;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuerta */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREAcceso_USCOREPuerta() { ns1__Modulo_USCOREAcceso_USCOREPuerta::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREAcceso_USCOREPuerta() { }
};
#endif

#ifndef SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse
#define SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse (18)
/* ns1:Modulo_Acceso_PuertaResponse */
class SOAP_CMAC ns1__Modulo_USCOREAcceso_USCOREPuertaResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_acceso_ns1__Modulo_USCOREAcceso_USCOREPuertaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Modulo_USCOREAcceso_USCOREPuertaResponse() { ns1__Modulo_USCOREAcceso_USCOREPuertaResponse::soap_default(NULL); }
	virtual ~ns1__Modulo_USCOREAcceso_USCOREPuertaResponse() { }
};
#endif

#ifndef SOAP_TYPE_acceso___ns1__Modulo_USCOREAcceso_USCOREPuerta
#define SOAP_TYPE_acceso___ns1__Modulo_USCOREAcceso_USCOREPuerta (27)
/* Operation wrapper: */
struct __ns1__Modulo_USCOREAcceso_USCOREPuerta
{
public:
	ns1__Modulo_USCOREAcceso_USCOREPuerta *ns1__Modulo_USCOREAcceso_USCOREPuerta_;	/* optional element of type ns1:Modulo_Acceso_Puerta */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_acceso___ns1__Modulo_USCOREAcceso_USCOREPuerta */
};
#endif

#ifndef SOAP_TYPE_acceso___ns1__Modulo_USCOREobtener_USCOREhora
#define SOAP_TYPE_acceso___ns1__Modulo_USCOREobtener_USCOREhora (31)
/* Operation wrapper: */
struct __ns1__Modulo_USCOREobtener_USCOREhora
{
public:
	ns1__Modulo_USCOREobtener_USCOREhora *ns1__Modulo_USCOREobtener_USCOREhora_;	/* optional element of type ns1:Modulo_obtener_hora */
public:
	int soap_type() const { return 31; } /* = unique type id SOAP_TYPE_acceso___ns1__Modulo_USCOREobtener_USCOREhora */
};
#endif

#ifndef SOAP_TYPE_acceso___ns1__Modulo_USCOREAsistencia
#define SOAP_TYPE_acceso___ns1__Modulo_USCOREAsistencia (35)
/* Operation wrapper: */
struct __ns1__Modulo_USCOREAsistencia
{
public:
	ns1__Modulo_USCOREAsistencia *ns1__Modulo_USCOREAsistencia_;	/* optional element of type ns1:Modulo_Asistencia */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_acceso___ns1__Modulo_USCOREAsistencia */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_acceso_SOAP_ENV__Header
#define SOAP_TYPE_acceso_SOAP_ENV__Header (36)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_acceso_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_acceso_SOAP_ENV__Code
#define SOAP_TYPE_acceso_SOAP_ENV__Code (37)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 37; } /* = unique type id SOAP_TYPE_acceso_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_acceso_SOAP_ENV__Detail
#define SOAP_TYPE_acceso_SOAP_ENV__Detail (39)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_acceso_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_acceso_SOAP_ENV__Reason
#define SOAP_TYPE_acceso_SOAP_ENV__Reason (42)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_acceso_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_acceso_SOAP_ENV__Fault
#define SOAP_TYPE_acceso_SOAP_ENV__Fault (43)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 43; } /* = unique type id SOAP_TYPE_acceso_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_acceso__QName
#define SOAP_TYPE_acceso__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_acceso__XML
#define SOAP_TYPE_acceso__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Modulo_USCOREAcceso_USCOREPuerta(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__Modulo_USCOREAcceso_USCOREPuerta *ns1__Modulo_USCOREAcceso_USCOREPuerta_, ns1__Modulo_USCOREAcceso_USCOREPuertaResponse &ns1__Modulo_USCOREAcceso_USCOREPuertaResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Modulo_USCOREobtener_USCOREhora(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__Modulo_USCOREobtener_USCOREhora *ns1__Modulo_USCOREobtener_USCOREhora_, ns1__Modulo_USCOREobtener_USCOREhoraResponse &ns1__Modulo_USCOREobtener_USCOREhoraResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Modulo_USCOREAsistencia(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__Modulo_USCOREAsistencia *ns1__Modulo_USCOREAsistencia_, ns1__Modulo_USCOREAsistenciaResponse &ns1__Modulo_USCOREAsistenciaResponse_);

} // namespace acceso


#endif

/* End of accesoStub.h */
