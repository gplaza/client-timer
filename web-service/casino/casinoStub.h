/* casinoStub.h
   Generated by gSOAP 2.8.21 from casino.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef casinoStub_H
#define casinoStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://Principal/"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace casino {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_casino_ns1__Transacciones
#define SOAP_TYPE_casino_ns1__Transacciones (8)
/* ns1:Transacciones */
class SOAP_CMAC ns1__Transacciones
{
public:
	std::string *rut;	/* optional element of type xsd:string */
	std::string *casino;	/* optional element of type xsd:string */
	int mes;	/* required element of type xsd:int */
	int a_x00f1o;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_casino_ns1__Transacciones */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Transacciones() { ns1__Transacciones::soap_default(NULL); }
	virtual ~ns1__Transacciones() { }
};
#endif

#ifndef SOAP_TYPE_casino_ns1__TransaccionesResponse
#define SOAP_TYPE_casino_ns1__TransaccionesResponse (9)
/* ns1:TransaccionesResponse */
class SOAP_CMAC ns1__TransaccionesResponse
{
public:
	std::vector<std::string >return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE_casino_ns1__TransaccionesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TransaccionesResponse() { ns1__TransaccionesResponse::soap_default(NULL); }
	virtual ~ns1__TransaccionesResponse() { }
};
#endif

#ifndef SOAP_TYPE_casino_ns1__validar_USCOREcasino
#define SOAP_TYPE_casino_ns1__validar_USCOREcasino (10)
/* ns1:validar_casino */
class SOAP_CMAC ns1__validar_USCOREcasino
{
public:
	std::string *rut;	/* optional element of type xsd:string */
	time_t *fecha;	/* optional element of type xsd:dateTime */
	std::string *dispo;	/* optional element of type xsd:string */
	std::string *dato_USCORErecibido;	/* optional element of type xsd:string */
	int tipomarca;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE_casino_ns1__validar_USCOREcasino */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__validar_USCOREcasino() { ns1__validar_USCOREcasino::soap_default(NULL); }
	virtual ~ns1__validar_USCOREcasino() { }
};
#endif

#ifndef SOAP_TYPE_casino_ns1__validar_USCOREcasinoResponse
#define SOAP_TYPE_casino_ns1__validar_USCOREcasinoResponse (11)
/* ns1:validar_casinoResponse */
class SOAP_CMAC ns1__validar_USCOREcasinoResponse
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_casino_ns1__validar_USCOREcasinoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__validar_USCOREcasinoResponse() { ns1__validar_USCOREcasinoResponse::soap_default(NULL); }
	virtual ~ns1__validar_USCOREcasinoResponse() { }
};
#endif

#ifndef SOAP_TYPE_casino___ns1__validar_USCOREcasino
#define SOAP_TYPE_casino___ns1__validar_USCOREcasino (21)
/* Operation wrapper: */
struct __ns1__validar_USCOREcasino
{
public:
	ns1__validar_USCOREcasino *ns1__validar_USCOREcasino_;	/* optional element of type ns1:validar_casino */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_casino___ns1__validar_USCOREcasino */
};
#endif

#ifndef SOAP_TYPE_casino___ns1__Transacciones
#define SOAP_TYPE_casino___ns1__Transacciones (25)
/* Operation wrapper: */
struct __ns1__Transacciones
{
public:
	ns1__Transacciones *ns1__Transacciones_;	/* optional element of type ns1:Transacciones */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_casino___ns1__Transacciones */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Header
#define SOAP_TYPE_casino_SOAP_ENV__Header (26)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_casino_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Code
#define SOAP_TYPE_casino_SOAP_ENV__Code (27)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_casino_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Detail
#define SOAP_TYPE_casino_SOAP_ENV__Detail (29)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_casino_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Reason
#define SOAP_TYPE_casino_SOAP_ENV__Reason (32)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_casino_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Fault
#define SOAP_TYPE_casino_SOAP_ENV__Fault (33)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_casino_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_casino__QName
#define SOAP_TYPE_casino__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_casino__XML
#define SOAP_TYPE_casino__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__validar_USCOREcasino(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__validar_USCOREcasino *ns1__validar_USCOREcasino_, ns1__validar_USCOREcasinoResponse &ns1__validar_USCOREcasinoResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Transacciones(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__Transacciones *ns1__Transacciones_, ns1__TransaccionesResponse &ns1__TransaccionesResponse_);

} // namespace casino


#endif

/* End of casinoStub.h */
