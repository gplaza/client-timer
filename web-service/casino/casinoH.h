/* casinoH.h
   Generated by gSOAP 2.8.21 from casino.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef casinoH_H
#define casinoH_H
#include "casinoStub.h"

namespace casino {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 casino_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 casino_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 casino_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino_byte
#define SOAP_TYPE_casino_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_byte(soap, data),0) || casino::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_int
#define SOAP_TYPE_casino_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_int(soap, data),0) || casino::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_time
#define SOAP_TYPE_casino_time (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_time(soap, data),0) || casino::soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_std__string
#define SOAP_TYPE_casino_std__string (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino_ns1__validar_USCOREcasinoResponse
#define SOAP_TYPE_casino_ns1__validar_USCOREcasinoResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__validar_USCOREcasinoResponse(struct soap*, const char*, int, const ns1__validar_USCOREcasinoResponse *, const char*);
SOAP_FMAC3 ns1__validar_USCOREcasinoResponse * SOAP_FMAC4 soap_in_ns1__validar_USCOREcasinoResponse(struct soap*, const char*, ns1__validar_USCOREcasinoResponse *, const char*);

#ifndef soap_write_ns1__validar_USCOREcasinoResponse
#define soap_write_ns1__validar_USCOREcasinoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:validar_casinoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__validar_USCOREcasinoResponse * SOAP_FMAC4 soap_get_ns1__validar_USCOREcasinoResponse(struct soap*, ns1__validar_USCOREcasinoResponse *, const char*, const char*);

#ifndef soap_read_ns1__validar_USCOREcasinoResponse
#define soap_read_ns1__validar_USCOREcasinoResponse(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_ns1__validar_USCOREcasinoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__validar_USCOREcasinoResponse * SOAP_FMAC2 soap_instantiate_ns1__validar_USCOREcasinoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__validar_USCOREcasinoResponse * soap_new_ns1__validar_USCOREcasinoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__validar_USCOREcasinoResponse(soap, n, NULL, NULL, NULL); }

inline ns1__validar_USCOREcasinoResponse * soap_new_req_ns1__validar_USCOREcasinoResponse(struct soap *soap) { ns1__validar_USCOREcasinoResponse *_p = soap_instantiate_ns1__validar_USCOREcasinoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__validar_USCOREcasinoResponse * soap_new_set_ns1__validar_USCOREcasinoResponse(struct soap *soap, std::string *return_) { ns1__validar_USCOREcasinoResponse *_p = soap_instantiate_ns1__validar_USCOREcasinoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__validar_USCOREcasinoResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__validar_USCOREcasinoResponse(struct soap *soap, ns1__validar_USCOREcasinoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__validar_USCOREcasinoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino_ns1__validar_USCOREcasino
#define SOAP_TYPE_casino_ns1__validar_USCOREcasino (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__validar_USCOREcasino(struct soap*, const char*, int, const ns1__validar_USCOREcasino *, const char*);
SOAP_FMAC3 ns1__validar_USCOREcasino * SOAP_FMAC4 soap_in_ns1__validar_USCOREcasino(struct soap*, const char*, ns1__validar_USCOREcasino *, const char*);

#ifndef soap_write_ns1__validar_USCOREcasino
#define soap_write_ns1__validar_USCOREcasino(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:validar_casino", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__validar_USCOREcasino * SOAP_FMAC4 soap_get_ns1__validar_USCOREcasino(struct soap*, ns1__validar_USCOREcasino *, const char*, const char*);

#ifndef soap_read_ns1__validar_USCOREcasino
#define soap_read_ns1__validar_USCOREcasino(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_ns1__validar_USCOREcasino(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__validar_USCOREcasino * SOAP_FMAC2 soap_instantiate_ns1__validar_USCOREcasino(struct soap*, int, const char*, const char*, size_t*);

inline ns1__validar_USCOREcasino * soap_new_ns1__validar_USCOREcasino(struct soap *soap, int n = -1) { return soap_instantiate_ns1__validar_USCOREcasino(soap, n, NULL, NULL, NULL); }

inline ns1__validar_USCOREcasino * soap_new_req_ns1__validar_USCOREcasino(struct soap *soap, int tipomarca) { ns1__validar_USCOREcasino *_p = soap_instantiate_ns1__validar_USCOREcasino(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__validar_USCOREcasino::tipomarca = tipomarca; } return _p; }

inline ns1__validar_USCOREcasino * soap_new_set_ns1__validar_USCOREcasino(struct soap *soap, std::string *rut, time_t *fecha, std::string *dispo, std::string *dato_USCORErecibido, int tipomarca) { ns1__validar_USCOREcasino *_p = soap_instantiate_ns1__validar_USCOREcasino(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__validar_USCOREcasino::rut = rut; _p->ns1__validar_USCOREcasino::fecha = fecha; _p->ns1__validar_USCOREcasino::dispo = dispo; _p->ns1__validar_USCOREcasino::dato_USCORErecibido = dato_USCORErecibido; _p->ns1__validar_USCOREcasino::tipomarca = tipomarca; } return _p; }

inline void soap_delete_ns1__validar_USCOREcasino(struct soap *soap, ns1__validar_USCOREcasino *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__validar_USCOREcasino(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino_ns1__TransaccionesResponse
#define SOAP_TYPE_casino_ns1__TransaccionesResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransaccionesResponse(struct soap*, const char*, int, const ns1__TransaccionesResponse *, const char*);
SOAP_FMAC3 ns1__TransaccionesResponse * SOAP_FMAC4 soap_in_ns1__TransaccionesResponse(struct soap*, const char*, ns1__TransaccionesResponse *, const char*);

#ifndef soap_write_ns1__TransaccionesResponse
#define soap_write_ns1__TransaccionesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:TransaccionesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__TransaccionesResponse * SOAP_FMAC4 soap_get_ns1__TransaccionesResponse(struct soap*, ns1__TransaccionesResponse *, const char*, const char*);

#ifndef soap_read_ns1__TransaccionesResponse
#define soap_read_ns1__TransaccionesResponse(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_ns1__TransaccionesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__TransaccionesResponse * SOAP_FMAC2 soap_instantiate_ns1__TransaccionesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransaccionesResponse * soap_new_ns1__TransaccionesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TransaccionesResponse(soap, n, NULL, NULL, NULL); }

inline ns1__TransaccionesResponse * soap_new_req_ns1__TransaccionesResponse(struct soap *soap) { ns1__TransaccionesResponse *_p = soap_instantiate_ns1__TransaccionesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__TransaccionesResponse * soap_new_set_ns1__TransaccionesResponse(struct soap *soap, std::vector<std::string >& return_) { ns1__TransaccionesResponse *_p = soap_instantiate_ns1__TransaccionesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TransaccionesResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__TransaccionesResponse(struct soap *soap, ns1__TransaccionesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TransaccionesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino_ns1__Transacciones
#define SOAP_TYPE_casino_ns1__Transacciones (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Transacciones(struct soap*, const char*, int, const ns1__Transacciones *, const char*);
SOAP_FMAC3 ns1__Transacciones * SOAP_FMAC4 soap_in_ns1__Transacciones(struct soap*, const char*, ns1__Transacciones *, const char*);

#ifndef soap_write_ns1__Transacciones
#define soap_write_ns1__Transacciones(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Transacciones", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Transacciones * SOAP_FMAC4 soap_get_ns1__Transacciones(struct soap*, ns1__Transacciones *, const char*, const char*);

#ifndef soap_read_ns1__Transacciones
#define soap_read_ns1__Transacciones(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_ns1__Transacciones(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Transacciones * SOAP_FMAC2 soap_instantiate_ns1__Transacciones(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Transacciones * soap_new_ns1__Transacciones(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Transacciones(soap, n, NULL, NULL, NULL); }

inline ns1__Transacciones * soap_new_req_ns1__Transacciones(struct soap *soap, int mes, int a_x00f1o) { ns1__Transacciones *_p = soap_instantiate_ns1__Transacciones(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Transacciones::mes = mes; _p->ns1__Transacciones::a_x00f1o = a_x00f1o; } return _p; }

inline ns1__Transacciones * soap_new_set_ns1__Transacciones(struct soap *soap, std::string *rut, std::string *casino, int mes, int a_x00f1o) { ns1__Transacciones *_p = soap_instantiate_ns1__Transacciones(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Transacciones::rut = rut; _p->ns1__Transacciones::casino = casino; _p->ns1__Transacciones::mes = mes; _p->ns1__Transacciones::a_x00f1o = a_x00f1o; } return _p; }

inline void soap_delete_ns1__Transacciones(struct soap *soap, ns1__Transacciones *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Transacciones(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Fault
#define SOAP_TYPE_casino_SOAP_ENV__Fault (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_SOAP_ENV__Fault(soap, data),0) || casino::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Reason
#define SOAP_TYPE_casino_SOAP_ENV__Reason (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_SOAP_ENV__Reason(soap, data),0) || casino::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Detail
#define SOAP_TYPE_casino_SOAP_ENV__Detail (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_SOAP_ENV__Detail(soap, data),0) || casino::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Code
#define SOAP_TYPE_casino_SOAP_ENV__Code (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_SOAP_ENV__Code(soap, data),0) || casino::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_SOAP_ENV__Header
#define SOAP_TYPE_casino_SOAP_ENV__Header (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_SOAP_ENV__Header(soap, data),0) || casino::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_casino___ns1__Transacciones
#define SOAP_TYPE_casino___ns1__Transacciones (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Transacciones(struct soap*, struct __ns1__Transacciones *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Transacciones(struct soap*, const struct __ns1__Transacciones *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Transacciones(struct soap*, const char*, int, const struct __ns1__Transacciones *, const char*);
SOAP_FMAC3 struct __ns1__Transacciones * SOAP_FMAC4 soap_in___ns1__Transacciones(struct soap*, const char*, struct __ns1__Transacciones *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Transacciones(struct soap*, const struct __ns1__Transacciones *, const char*, const char*);

#ifndef soap_write___ns1__Transacciones
#define soap_write___ns1__Transacciones(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize___ns1__Transacciones(soap, data),0) || casino::soap_put___ns1__Transacciones(soap, data, "-ns1:Transacciones", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Transacciones * SOAP_FMAC4 soap_get___ns1__Transacciones(struct soap*, struct __ns1__Transacciones *, const char*, const char*);

#ifndef soap_read___ns1__Transacciones
#define soap_read___ns1__Transacciones(soap, data) ( soap_begin_recv(soap) || !casino::soap_get___ns1__Transacciones(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Transacciones * SOAP_FMAC2 soap_instantiate___ns1__Transacciones(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Transacciones * soap_new___ns1__Transacciones(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Transacciones(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Transacciones * soap_new_req___ns1__Transacciones(struct soap *soap) { struct __ns1__Transacciones *_p = soap_instantiate___ns1__Transacciones(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Transacciones(soap, _p); } return _p; }

inline struct __ns1__Transacciones * soap_new_set___ns1__Transacciones(struct soap *soap, ns1__Transacciones *ns1__Transacciones_) { struct __ns1__Transacciones *_p = soap_instantiate___ns1__Transacciones(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Transacciones(soap, _p); _p->ns1__Transacciones_ = ns1__Transacciones_; } return _p; }

inline void soap_delete___ns1__Transacciones(struct soap *soap, struct __ns1__Transacciones *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Transacciones(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_casino___ns1__validar_USCOREcasino
#define SOAP_TYPE_casino___ns1__validar_USCOREcasino (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__validar_USCOREcasino(struct soap*, struct __ns1__validar_USCOREcasino *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__validar_USCOREcasino(struct soap*, const struct __ns1__validar_USCOREcasino *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__validar_USCOREcasino(struct soap*, const char*, int, const struct __ns1__validar_USCOREcasino *, const char*);
SOAP_FMAC3 struct __ns1__validar_USCOREcasino * SOAP_FMAC4 soap_in___ns1__validar_USCOREcasino(struct soap*, const char*, struct __ns1__validar_USCOREcasino *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__validar_USCOREcasino(struct soap*, const struct __ns1__validar_USCOREcasino *, const char*, const char*);

#ifndef soap_write___ns1__validar_USCOREcasino
#define soap_write___ns1__validar_USCOREcasino(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize___ns1__validar_USCOREcasino(soap, data),0) || casino::soap_put___ns1__validar_USCOREcasino(soap, data, "-ns1:validar_casino", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__validar_USCOREcasino * SOAP_FMAC4 soap_get___ns1__validar_USCOREcasino(struct soap*, struct __ns1__validar_USCOREcasino *, const char*, const char*);

#ifndef soap_read___ns1__validar_USCOREcasino
#define soap_read___ns1__validar_USCOREcasino(soap, data) ( soap_begin_recv(soap) || !casino::soap_get___ns1__validar_USCOREcasino(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__validar_USCOREcasino * SOAP_FMAC2 soap_instantiate___ns1__validar_USCOREcasino(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__validar_USCOREcasino * soap_new___ns1__validar_USCOREcasino(struct soap *soap, int n = -1) { return soap_instantiate___ns1__validar_USCOREcasino(soap, n, NULL, NULL, NULL); }

inline struct __ns1__validar_USCOREcasino * soap_new_req___ns1__validar_USCOREcasino(struct soap *soap) { struct __ns1__validar_USCOREcasino *_p = soap_instantiate___ns1__validar_USCOREcasino(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__validar_USCOREcasino(soap, _p); } return _p; }

inline struct __ns1__validar_USCOREcasino * soap_new_set___ns1__validar_USCOREcasino(struct soap *soap, ns1__validar_USCOREcasino *ns1__validar_USCOREcasino_) { struct __ns1__validar_USCOREcasino *_p = soap_instantiate___ns1__validar_USCOREcasino(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__validar_USCOREcasino(soap, _p); _p->ns1__validar_USCOREcasino_ = ns1__validar_USCOREcasino_; } return _p; }

inline void soap_delete___ns1__validar_USCOREcasino(struct soap *soap, struct __ns1__validar_USCOREcasino *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__validar_USCOREcasino(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_casino_PointerToSOAP_ENV__Reason (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || casino::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_casino_PointerToSOAP_ENV__Detail (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || casino::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_casino_PointerToSOAP_ENV__Code
#define SOAP_TYPE_casino_PointerToSOAP_ENV__Code (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || casino::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_casino_PointerTons1__Transacciones
#define SOAP_TYPE_casino_PointerTons1__Transacciones (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Transacciones(struct soap*, ns1__Transacciones *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Transacciones(struct soap*, const char *, int, ns1__Transacciones *const*, const char *);
SOAP_FMAC3 ns1__Transacciones ** SOAP_FMAC4 soap_in_PointerTons1__Transacciones(struct soap*, const char*, ns1__Transacciones **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Transacciones(struct soap*, ns1__Transacciones *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Transacciones
#define soap_write_PointerTons1__Transacciones(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerTons1__Transacciones(soap, data),0) || casino::soap_put_PointerTons1__Transacciones(soap, data, "ns1:Transacciones", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Transacciones ** SOAP_FMAC4 soap_get_PointerTons1__Transacciones(struct soap*, ns1__Transacciones **, const char*, const char*);

#ifndef soap_read_PointerTons1__Transacciones
#define soap_read_PointerTons1__Transacciones(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerTons1__Transacciones(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_PointerTons1__validar_USCOREcasino
#define SOAP_TYPE_casino_PointerTons1__validar_USCOREcasino (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__validar_USCOREcasino(struct soap*, ns1__validar_USCOREcasino *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__validar_USCOREcasino(struct soap*, const char *, int, ns1__validar_USCOREcasino *const*, const char *);
SOAP_FMAC3 ns1__validar_USCOREcasino ** SOAP_FMAC4 soap_in_PointerTons1__validar_USCOREcasino(struct soap*, const char*, ns1__validar_USCOREcasino **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__validar_USCOREcasino(struct soap*, ns1__validar_USCOREcasino *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__validar_USCOREcasino
#define soap_write_PointerTons1__validar_USCOREcasino(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerTons1__validar_USCOREcasino(soap, data),0) || casino::soap_put_PointerTons1__validar_USCOREcasino(soap, data, "ns1:validar_casino", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__validar_USCOREcasino ** SOAP_FMAC4 soap_get_PointerTons1__validar_USCOREcasino(struct soap*, ns1__validar_USCOREcasino **, const char*, const char*);

#ifndef soap_read_PointerTons1__validar_USCOREcasino
#define soap_read_PointerTons1__validar_USCOREcasino(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerTons1__validar_USCOREcasino(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_PointerTotime
#define SOAP_TYPE_casino_PointerTotime (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerTotime(soap, data),0) || casino::soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_PointerTostd__string
#define SOAP_TYPE_casino_PointerTostd__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_PointerTostd__string(soap, data),0) || casino::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino__QName
#define SOAP_TYPE_casino__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize__QName(soap, data),0) || casino::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !casino::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_string
#define SOAP_TYPE_casino_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (casino::soap_serialize_string(soap, data),0) || casino::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !casino::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_casino_std__vectorTemplateOfstd__string
#define SOAP_TYPE_casino_std__vectorTemplateOfstd__string (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace casino


#endif

/* End of casinoH.h */
